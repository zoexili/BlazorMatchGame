@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";

            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))" type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches Found: @matchFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>


@code {
    List<string> animalEmoji = new List<string>()
    {
        "🐶", "🐶",
        "🐺", "🐺",
        "🐱", "🐱",
        "🐵", "🐵",
        "🐨", "🐨",
        "🐷", "🐷",
        "🐯", "🐯",
        "🦁", "🦁",
    };

    List<string> shuffledAnimals = new List<string>();
    int matchFound = 0;
    Timer timer;
    int tenthsofSecondsElapsed = 0;
    string timeDisplay;
    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();
        matchFound = 0;
        tenthsofSecondsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        // if empty, that's first click, set lastanimalfound = animal
        if (lastAnimalFound == string.Empty)
        {
            // no match
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        // if the current animal (second click) == lastanimalfound, we find a match
        else if ((lastAnimalFound == animal) && (lastDescription != animalDescription))
        {
            // match
            lastAnimalFound = string.Empty;
            shuffledAnimals = shuffledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();
            matchFound++;
            if (matchFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";

                SetUpGame();
            }
        }
        else
        // current animal (second click does not match)
        {
            lastAnimalFound = string.Empty;
        }


    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsofSecondsElapsed++;
            timeDisplay = (tenthsofSecondsElapsed / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }
}